import streamlit as st
import requests
import pandas as pd
from datetime import datetime
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
st.set_page_config(
    page_title="WindexRouter - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ API –∫–ª—é—á–∞–º–∏",
    page_icon="üîë",
    layout="wide"
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API
API_BASE_URL = "http://localhost:1101"

# –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
def get_headers():
    headers = {"Content-Type": "application/json"}
    if "access_token" in st.session_state:
        headers["Authorization"] = f"Bearer {st.session_state.access_token}"
    return headers

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
def register_user(username, email, password):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    url = f"{API_BASE_URL}/api/auth/register"
    data = {
        "username": username,
        "email": email,
        "password": password
    }
    
    try:
        response = requests.post(url, json=data, headers=get_headers())
        if response.status_code == 200:
            return response.json()
        else:
            error_data = response.json() if response.content else {"detail": "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"}
            return {"error": error_data.get("detail", "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")}
    except Exception as e:
        return {"error": f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}"}

def login_user(username, password):
    """–í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    url = f"{API_BASE_URL}/api/auth/login"
    data = {
        "username": username,
        "password": password
    }
    
    try:
        response = requests.post(url, json=data, headers=get_headers())
        if response.status_code == 200:
            return response.json()
        else:
            error_data = response.json() if response.content else {"detail": "–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞"}
            return {"error": error_data.get("detail", "–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞")}
    except Exception as e:
        return {"error": f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}"}

def get_current_user():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    url = f"{API_BASE_URL}/api/auth/me"
    
    try:
        response = requests.get(url, headers=get_headers())
        if response.status_code == 200:
            return response.json()
        else:
            return None
    except Exception as e:
        return None

def logout_user():
    """–í—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    url = f"{API_BASE_URL}/api/auth/logout"
    
    try:
        response = requests.post(url, headers=get_headers())
        if response.status_code == 200:
            return True
        else:
            return False
    except Exception as e:
        return False

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API –∫–ª—é—á–∞–º–∏
def create_api_key(name, expires_days=None):
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π API –∫–ª—é—á"""
    url = f"{API_BASE_URL}/api/keys"
    data = {"name": name}
    if expires_days:
        data["expires_in_days"] = expires_days

    try:
        response = requests.post(url, json=data, headers=get_headers())
        if response.status_code == 200:
            return response.json()
        else:
            error_data = response.json() if response.content else {"detail": "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞"}
            return {"error": error_data.get("detail", "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞")}
    except Exception as e:
        return {"error": f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}"}

def get_api_keys():
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ API –∫–ª—é—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    url = f"{API_BASE_URL}/api/keys"
    try:
        response = requests.get(url, headers=get_headers())
        if response.status_code == 200:
            return response.json()
        else:
            return []
    except Exception as e:
        return []

def delete_api_key(key_id):
    """–£–¥–∞–ª–∏—Ç—å API –∫–ª—é—á"""
    url = f"{API_BASE_URL}/api/keys/{key_id}"
    try:
        response = requests.delete(url, headers=get_headers())
        if response.status_code == 200:
            return True
        else:
            return False
    except Exception as e:
        return False

def toggle_api_key(key_id):
    """–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å API –∫–ª—é—á"""
    url = f"{API_BASE_URL}/api/keys/{key_id}/toggle"
    try:
        response = requests.put(url, headers=get_headers())
        if response.status_code == 200:
            return True
        else:
            return False
    except Exception as e:
        return False

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤—Ö–æ–¥–∞/—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
def auth_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    st.title("üîë WindexRouter - –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É")
    
    tab1, tab2 = st.tabs(["–í—Ö–æ–¥", "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"])
    
    with tab1:
        st.header("–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É")
        
        with st.form("login_form"):
            username = st.text_input("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password", placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å")
            
            if st.form_submit_button("–í–æ–π—Ç–∏", type="primary"):
                if username and password:
                    result = login_user(username, password)
                    if "error" in result:
                        st.error(f"‚ùå {result['error']}")
                    else:
                        st.session_state.access_token = result["access_token"]
                        st.session_state.user_info = {
                            "username": username,
                            "token": result["access_token"],
                            "expires_at": result["expires_at"]
                        }
                        st.success("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥!")
                        st.rerun()
                else:
                    st.error("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è")
    
    with tab2:
        st.header("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
        
        with st.form("register_form"):
            username = st.text_input("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            email = st.text_input("Email", placeholder="–í–≤–µ–¥–∏—Ç–µ email")
            password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password", placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å")
            password_confirm = st.text_input("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å", type="password", placeholder="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å")
            
            if st.form_submit_button("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", type="primary"):
                if username and email and password and password_confirm:
                    if password != password_confirm:
                        st.error("‚ùå –ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç")
                    elif len(password) < 6:
                        st.error("‚ùå –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤")
                    else:
                        result = register_user(username, email, password)
                        if "error" in result:
                            st.error(f"‚ùå {result['error']}")
                        else:
                            st.success("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.")
                else:
                    st.error("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è")

# –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def user_dashboard():
    """–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_info = get_current_user()
    if not user_info:
        st.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")
        return
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    col1, col2, col3 = st.columns([2, 1, 1])
    
    with col1:
        st.title(f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_info['username']}!")
    
    with col2:
        st.metric("Email", user_info['email'])
    
    with col3:
        if st.button("üö™ –í—ã–π—Ç–∏", type="secondary"):
            if logout_user():
                # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
                for key in list(st.session_state.keys()):
                    del st.session_state[key]
                st.success("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—ã—Ö–æ–¥!")
                st.rerun()
            else:
                st.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ")
    
    st.divider()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞
    st.header("üîë –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π API –∫–ª—é—á")
    col1, col2 = st.columns(2)

    with col1:
        key_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª—é—á–∞", placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: DeepSeek API Key")

    with col2:
        expires_days = st.number_input("–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è (–¥–Ω–∏)", min_value=1, value=30, help="0 = –±–µ–∑ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è")

    if st.button("üîë –°–æ–∑–¥–∞—Ç—å –∫–ª—é—á", type="primary"):
        if key_name.strip():
            if expires_days == 0:
                expires_days = None
            result = create_api_key(key_name.strip(), expires_days)
            if "error" in result:
                st.error(f"‚ùå {result['error']}")
            else:
                st.success("‚úÖ –ö–ª—é—á —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
                st.code(result["key"], language="text")
                st.rerun()
        else:
            st.error("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª—é—á–∞")

    st.divider()

    # –°–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–ª—é—á–µ–π
    st.header("üìã –ú–æ–∏ API –∫–ª—é—á–∏")

    keys = get_api_keys()

    if keys:
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ DataFrame –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        df_data = []
        for key in keys:
            df_data.append({
                "ID": key["id"],
                "–ù–∞–∑–≤–∞–Ω–∏–µ": key["name"],
                "–ö–ª—é—á": key["key"],
                "–°–æ–∑–¥–∞–Ω": datetime.fromisoformat(key["created_at"]).strftime("%d.%m.%Y %H:%M"),
                "–ò—Å—Ç–µ–∫–∞–µ—Ç": datetime.fromisoformat(key["expires_at"]).strftime("%d.%m.%Y %H:%M") if key["expires_at"] else "–ë–µ—Å—Å—Ä–æ—á–Ω–æ",
                "–ê–∫—Ç–∏–≤–µ–Ω": "‚úÖ –î–∞" if key["is_active"] else "‚ùå –ù–µ—Ç"
            })

        df = pd.DataFrame(df_data)

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        st.dataframe(
            df,
            column_config={
                "–ö–ª—é—á": st.column_config.TextColumn("–ö–ª—é—á", width="large"),
                "ID": st.column_config.TextColumn("ID", width="small")
            },
            hide_index=True,
            use_container_width=True
        )

        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–∞–º–∏
        st.header("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–∞–º–∏")

        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∫–ª—é—á–µ–π –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é
        active_keys = [k for k in keys if k["is_active"]]
        inactive_keys = [k for k in keys if not k["is_active"]]

        if active_keys:
            st.subheader("–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–ª—é—á–∏")
            for key in active_keys:
                col1, col2, col3, col4 = st.columns([3, 2, 1, 1])

                with col1:
                    st.write(f"**{key['name']}**")
                    st.code(key["key"], language="text")

                with col2:
                    st.write(f"–°–æ–∑–¥–∞–Ω: {datetime.fromisoformat(key['created_at']).strftime('%d.%m.%Y %H:%M')}")
                    if key["expires_at"]:
                        st.write(f"–ò—Å—Ç–µ–∫–∞–µ—Ç: {datetime.fromisoformat(key['expires_at']).strftime('%d.%m.%Y %H:%M')}")

                with col3:
                    if st.button("üö´ –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", key=f"deactivate_{key['id']}"):
                        if toggle_api_key(key["id"]):
                            st.success("–ö–ª—é—á –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
                            st.rerun()

                with col4:
                    if st.button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", key=f"delete_active_{key['id']}", type="secondary"):
                        if delete_api_key(key["id"]):
                            st.success("–ö–ª—é—á —É–¥–∞–ª–µ–Ω")
                            st.rerun()

        if inactive_keys:
            st.subheader("–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª—é—á–∏")
            for key in inactive_keys:
                col1, col2, col3, col4 = st.columns([3, 2, 1, 1])

                with col1:
                    st.write(f"**{key['name']}** (–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω)")
                    st.code(key["key"], language="text")

                with col2:
                    st.write(f"–°–æ–∑–¥–∞–Ω: {datetime.fromisoformat(key['created_at']).strftime('%d.%m.%Y %H:%M')}")
                    if key["expires_at"]:
                        st.write(f"–ò—Å—Ç–µ–∫–∞–µ—Ç: {datetime.fromisoformat(key['expires_at']).strftime('%d.%m.%Y %H:%M')}")

                with col3:
                    if st.button("‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", key=f"activate_{key['id']}"):
                        if toggle_api_key(key["id"]):
                            st.success("–ö–ª—é—á –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
                            st.rerun()

                with col4:
                    if st.button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", key=f"delete_inactive_{key['id']}", type="secondary"):
                        if delete_api_key(key["id"]):
                            st.success("–ö–ª—é—á —É–¥–∞–ª–µ–Ω")
                            st.rerun()

    else:
        st.info("üì≠ –ü–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö API –∫–ª—é—á–µ–π. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –∫–ª—é—á –≤—ã—à–µ!")

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ
    st.divider()
    st.header("‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ")
    st.markdown("""
    **WindexRouter** - —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è API –∫–ª—é—á–∞–º–∏ —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ DeepSeek AI.

    ### –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
    - üîë –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö API –∫–ª—é—á–µ–π
    - üìÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è –∫–ª—é—á–µ–π
    - üîÑ –ê–∫—Ç–∏–≤–∞—Ü–∏—è/–¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –∫–ª—é—á–µ–π
    - üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–Ω—É–∂–Ω—ã—Ö –∫–ª—é—á–µ–π
    - üìä –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π
    - üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    - ü§ñ **–î–æ—Å—Ç—É–ø –∫ DeepSeek AI —á–µ—Ä–µ–∑ –≤–∞—à–∏ API –∫–ª—é—á–∏**

    ### –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ DeepSeek API:
    ```python
    import requests

    # –í–∞—à API –∫–ª—é—á –∏–∑ WindexRouter
    api_key = "wr_your_api_key_here"
    
    # –ó–∞–ø—Ä–æ—Å –∫ DeepSeek —á–µ—Ä–µ–∑ WindexRouter
    headers = {
        "Authorization": f"Bearer {api_key}",
        "Content-Type": "application/json"
    }
    
    data = {
        "model": "deepseek-chat",
        "messages": [
            {"role": "user", "content": "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?"}
        ],
        "max_tokens": 100
    }
    
    response = requests.post(
        "http://localhost:1101/api/deepseek/chat/completions",
        json=data,
        headers=headers
    )
    
    if response.status_code == 200:
        result = response.json()
        print(result["choices"][0]["message"]["content"])
    else:
        print(f"–û—à–∏–±–∫–∞: {response.text}")
    ```

    ### –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ DeepSeek:
    - **deepseek-chat** - –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è —á–∞—Ç–∞
    - **deepseek-coder** - –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è

    ### –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π:
    ```python
    response = requests.get(
        "http://localhost:1101/api/deepseek/models",
        headers={"Authorization": f"Bearer {api_key}"}
    )
    ```
    """)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if "access_token" not in st.session_state:
        auth_page()
    else:
        user_dashboard()

if __name__ == "__main__":
    main()