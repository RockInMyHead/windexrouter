import streamlit as st
import requests
import pandas as pd
from datetime import datetime
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
st.set_page_config(
    page_title="WindexRouter - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ API –∫–ª—é—á–∞–º–∏",
    page_icon="üîë",
    layout="wide"
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API
API_BASE_URL = "http://localhost:80"

# –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
HEADERS = {
    "Content-Type": "application/json"
}

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API
def create_api_key(name, expires_days=None):
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π API –∫–ª—é—á"""
    url = f"{API_BASE_URL}/api/keys"
    data = {"name": name}
    if expires_days:
        data["expires_in_days"] = expires_days

    try:
        response = requests.post(url, json=data, headers=HEADERS)
        if response.status_code == 200:
            return response.json()
        else:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª—é—á–∞: {response.text}")
            return None
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}")
        return None

def get_api_keys():
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ API –∫–ª—é—á–∏"""
    url = f"{API_BASE_URL}/api/keys"
    try:
        response = requests.get(url, headers=HEADERS)
        if response.status_code == 200:
            return response.json()
        else:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–ª—é—á–µ–π: {response.text}")
            return []
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}")
        return []

def delete_api_key(key_id):
    """–£–¥–∞–ª–∏—Ç—å API –∫–ª—é—á"""
    url = f"{API_BASE_URL}/api/keys/{key_id}"
    try:
        response = requests.delete(url, headers=HEADERS)
        if response.status_code == 200:
            return True
        else:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª—é—á–∞: {response.text}")
            return False
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}")
        return False

def toggle_api_key(key_id):
    """–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å API –∫–ª—é—á"""
    url = f"{API_BASE_URL}/api/keys/{key_id}/toggle"
    try:
        response = requests.put(url, headers=HEADERS)
        if response.status_code == 200:
            return True
        else:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∫–ª—é—á–∞: {response.text}")
            return False
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}")
        return False

# –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
def main():
    st.title("üîë WindexRouter - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ API –∫–ª—é—á–∞–º–∏")

    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞
    st.header("–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π API –∫–ª—é—á")
    col1, col2 = st.columns(2)

    with col1:
        key_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª—é—á–∞", placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: DeepSeek API Key")

    with col2:
        expires_days = st.number_input("–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è (–¥–Ω–∏)", min_value=1, value=30, help="0 = –±–µ–∑ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è")

    if st.button("üîë –°–æ–∑–¥–∞—Ç—å –∫–ª—é—á", type="primary"):
        if key_name.strip():
            if expires_days == 0:
                expires_days = None
            result = create_api_key(key_name.strip(), expires_days)
            if result:
                st.success("‚úÖ –ö–ª—é—á —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
                st.code(result["key"], language="text")
                st.rerun()
        else:
            st.error("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª—é—á–∞")

    st.divider()

    # –°–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–ª—é—á–µ–π
    st.header("üìã –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ API –∫–ª—é—á–∏")

    keys = get_api_keys()

    if keys:
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ DataFrame –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        df_data = []
        for key in keys:
            df_data.append({
                "ID": key["id"],
                "–ù–∞–∑–≤–∞–Ω–∏–µ": key["name"],
                "–ö–ª—é—á": key["key"],
                "–°–æ–∑–¥–∞–Ω": datetime.fromisoformat(key["created_at"]).strftime("%d.%m.%Y %H:%M"),
                "–ò—Å—Ç–µ–∫–∞–µ—Ç": datetime.fromisoformat(key["expires_at"]).strftime("%d.%m.%Y %H:%M") if key["expires_at"] else "–ë–µ—Å—Å—Ä–æ—á–Ω–æ",
                "–ê–∫—Ç–∏–≤–µ–Ω": "‚úÖ –î–∞" if key["is_active"] else "‚ùå –ù–µ—Ç"
            })

        df = pd.DataFrame(df_data)

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        st.dataframe(
            df,
            column_config={
                "–ö–ª—é—á": st.column_config.TextColumn("–ö–ª—é—á", width="large"),
                "ID": st.column_config.TextColumn("ID", width="small")
            },
            hide_index=True,
            use_container_width=True
        )

        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–∞–º–∏
        st.header("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–∞–º–∏")

        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∫–ª—é—á–µ–π –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é
        active_keys = [k for k in keys if k["is_active"]]
        inactive_keys = [k for k in keys if not k["is_active"]]

        if active_keys:
            st.subheader("–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–ª—é—á–∏")
            for key in active_keys:
                col1, col2, col3, col4 = st.columns([3, 2, 1, 1])

                with col1:
                    st.write(f"**{key['name']}**")
                    st.code(key["key"], language="text")

                with col2:
                    st.write(f"–°–æ–∑–¥–∞–Ω: {datetime.fromisoformat(key['created_at']).strftime('%d.%m.%Y %H:%M')}")
                    if key["expires_at"]:
                        st.write(f"–ò—Å—Ç–µ–∫–∞–µ—Ç: {datetime.fromisoformat(key['expires_at']).strftime('%d.%m.%Y %H:%M')}")

                with col3:
                    if st.button("üö´ –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", key=f"deactivate_{key['id']}"):
                        if toggle_api_key(key["id"]):
                            st.success("–ö–ª—é—á –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
                            st.rerun()

                with col4:
                    if st.button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", key=f"delete_active_{key['id']}", type="secondary"):
                        if delete_api_key(key["id"]):
                            st.success("–ö–ª—é—á —É–¥–∞–ª–µ–Ω")
                            st.rerun()

        if inactive_keys:
            st.subheader("–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª—é—á–∏")
            for key in inactive_keys:
                col1, col2, col3, col4 = st.columns([3, 2, 1, 1])

                with col1:
                    st.write(f"**{key['name']}** (–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω)")
                    st.code(key["key"], language="text")

                with col2:
                    st.write(f"–°–æ–∑–¥–∞–Ω: {datetime.fromisoformat(key['created_at']).strftime('%d.%m.%Y %H:%M')}")
                    if key["expires_at"]:
                        st.write(f"–ò—Å—Ç–µ–∫–∞–µ—Ç: {datetime.fromisoformat(key['expires_at']).strftime('%d.%m.%Y %H:%M')}")

                with col3:
                    if st.button("‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", key=f"activate_{key['id']}"):
                        if toggle_api_key(key["id"]):
                            st.success("–ö–ª—é—á –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
                            st.rerun()

                with col4:
                    if st.button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", key=f"delete_inactive_{key['id']}", type="secondary"):
                        if delete_api_key(key["id"]):
                            st.success("–ö–ª—é—á —É–¥–∞–ª–µ–Ω")
                            st.rerun()

    else:
        st.info("üì≠ –ü–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö API –∫–ª—é—á–µ–π. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –∫–ª—é—á –≤—ã—à–µ!")

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ
    st.divider()
    st.header("‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ")
    st.markdown("""
    **WindexRouter** - —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è API –∫–ª—é—á–∞–º–∏ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤.

    ### –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
    - üîë –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö API –∫–ª—é—á–µ–π
    - üìÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è –∫–ª—é—á–µ–π
    - üîÑ –ê–∫—Ç–∏–≤–∞—Ü–∏—è/–¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –∫–ª—é—á–µ–π
    - üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–Ω—É–∂–Ω—ã—Ö –∫–ª—é—á–µ–π
    - üìä –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π

    ### –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ –ø—Ä–æ–µ–∫—Ç–∞—Ö:
    ```python
    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API –∫–ª—é—á–∞
    headers = {"Authorization": "Bearer your_api_key_here"}
    response = requests.get("https://your-api.com/endpoint", headers=headers)
    ```
    """)

if __name__ == "__main__":
    main()
